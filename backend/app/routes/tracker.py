from fastapi import APIRouter, HTTPException, Depends, Query
from sqlalchemy.orm import Session
from typing import List, Optional

from app.database import get_db
from app.crud import (
    save_user_schedule,
    get_user_schedule,
    get_trainings_by_date,
    delete_user_schedule,
    get_user_calendar_dates,
    debug_all_schedules,
    get_available_course_ids
)
from app.models.tracker import (
    ScheduleInstance,
    AddScheduleRequest,
    ScheduleResponse,
    TrainingByDateResponse,
    TrainingDayInfo,
    AddScheduleResponse,
    DeleteScheduleResponse
)
from app.routes.auth import get_current_user

router = APIRouter()


@router.post("/schedule", response_model=AddScheduleResponse)
async def add_schedule(
    request: AddScheduleRequest,
    current_user: dict = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """
    –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        print(f"üìÖ POST /tracker/schedule - User ID: {current_user['id']}")
        print(f"üìã Received schedule data: {request.schedule}")
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Pydantic –º–æ–¥–µ–ª–∏ –≤ —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è CRUD —Ñ—É–Ω–∫—Ü–∏–∏
        schedule_data = []
        for item in request.schedule:
            schedule_data.append({
                "course_id": item.course_id,
                "date": item.date,
                "index": item.index
            })
        
        print(f"üìã Processed schedule data: {schedule_data}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        added_count = save_user_schedule(db, current_user["id"], schedule_data)
        
        return AddScheduleResponse(
            message=f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ",
            added_instances=added_count,
            user_id=current_user["id"]
        )
        
    except Exception as e:
        print(f"Error adding schedule: {e}")
        raise HTTPException(
            status_code=500,
            detail="–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"
        )


@router.get("/schedule", response_model=ScheduleResponse)
async def get_schedule(
    course_id: Optional[str] = Query(None, description="ID –∫—É—Ä—Å–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏"),
    current_user: dict = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """
    –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        print(f"üìã GET /tracker/schedule - User ID: {current_user['id']}, Course ID: {course_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        schedule_db = get_user_schedule(db, current_user["id"], course_id)
        
        print(f"üìä Found {len(schedule_db)} schedule items in database")
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ Pydantic –º–æ–¥–µ–ª–∏
        schedule_instances = []
        for item in schedule_db:
            schedule_instances.append(ScheduleInstance(
                date=item.date,
                index=item.training_index,
                course_id=item.course_id
            ))
        
        return ScheduleResponse(
            user_id=current_user["id"],
            total_instances=len(schedule_instances),
            schedule=schedule_instances
        )
        
    except Exception as e:
        print(f"Error getting schedule: {e}")
        raise HTTPException(
            status_code=500,
            detail="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"
        )


@router.get("/schedule/date/{date}", response_model=TrainingByDateResponse)
async def get_trainings_by_date_endpoint(
    date: str,
    current_user: dict = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """
    –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É
    –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 21.07.2025)
    """
    try:
        print(f"üîç GET /tracker/schedule/date/{date} - User ID: {current_user['id']}")
        

        
        # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∞ –¥–∞—Ç—É
        trainings_data = get_trainings_by_date(db, current_user["id"], date)
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ Pydantic –º–æ–¥–µ–ª–∏
        trainings = []
        for training in trainings_data:
            trainings.append(TrainingDayInfo(
                course_id=training["course_id"],
                course_title=training["course_title"],
                training_index=training["training_index"],
                training_day=training["training_day"]
            ))
        
        print(f"üìä Returning {len(trainings)} trainings for date '{date}'")
        
        return TrainingByDateResponse(
            date=date,
            trainings=trainings
        )
        
    except Exception as e:
        print(f"‚ùå Error getting trainings by date: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∞ –¥–∞—Ç—É {date}"
        )


@router.delete("/schedule/{course_id}", response_model=DeleteScheduleResponse)
async def delete_schedule(
    course_id: str,
    current_user: dict = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """
    –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫—É—Ä—Å–∞
    """
    try:
        # –£–¥–∞–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫—É—Ä—Å–∞
        deleted_count = delete_user_schedule(db, current_user["id"], course_id)
        
        return DeleteScheduleResponse(
            message=f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫—É—Ä—Å–∞ {course_id} —É–¥–∞–ª–µ–Ω–æ",
            deleted_instances=deleted_count
        )
        
    except Exception as e:
        print(f"Error deleting schedule: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫—É—Ä—Å–∞ {course_id}"
        )


@router.get("/calendar", response_model=List[str])
async def get_calendar(
    current_user: dict = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """
    –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–∞—Ç—ã —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞—Ç—ã —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏
        dates = get_user_calendar_dates(db, current_user["id"])
        
        return dates
        
    except Exception as e:
        print(f"Error getting calendar dates: {e}")
        raise HTTPException(
            status_code=500,
            detail="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"
        )


@router.get("/available-courses", response_model=List[str])
async def get_available_courses(
    current_user: dict = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö course_id –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    """
    try:
        course_ids = get_available_course_ids(db)
        return course_ids
        
    except Exception as e:
        print(f"Error getting available courses: {e}")
        raise HTTPException(
            status_code=500,
            detail="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—Å–æ–≤"
        ) 